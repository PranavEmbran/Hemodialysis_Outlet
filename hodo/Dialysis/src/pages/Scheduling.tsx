import React, { useState, useEffect } from 'react';
import Header from '../components/Header';
import Footer from '../components/Footer';
import PageContainer from '../components/PageContainer';
import SectionHeading from '../components/SectionHeading';
import SelectField from '../components/forms/SelectField';
import InputField from '../components/forms/InputField';
import ButtonWithGradient from '../components/ButtonWithGradient';
import Table from '../components/Table';
import { API_URL } from '../config';

const sessionOptions = [
  { label: '1st', value: '1st' },
  { label: '2nd', value: '2nd' },
  { label: '3rd', value: '3rd' },
];
const intervalOptions = [
  { label: 'Daily', value: 'daily' },
  { label: 'Alternate Days', value: 'alternate' },
  { label: 'Twice a week', value: 'twice' },
  { label: 'Thrice a week', value: 'thrice' },
];

function getDayName(dateStr: string) {
  return new Date(dateStr).toLocaleDateString('en-US', { weekday: 'long' });
}
function getMonthName(dateStr: string) {
  return new Date(dateStr).toLocaleDateString('en-US', { month: 'long' });
}

const Scheduling: React.FC<{ sidebarCollapsed: boolean; toggleSidebar: () => void }> = ({ sidebarCollapsed, toggleSidebar }) => {
  const [patients, setPatients] = useState<any[]>([]);

  const today = new Date().toISOString().split('T')[0]; 

  const [form, setForm] = useState({
    patient: '',
    interval: 'daily',
    sessionPreferred: '1st',
    numSessions: 5,
    fromDate: today,
    tillDate: '',
  });
  const [scheduleRows, setScheduleRows] = useState<any[]>([]);
  const [selectedRows, setSelectedRows] = useState<any[]>([]);
  const [error, setError] = useState<string>('');
  const [saveStatus, setSaveStatus] = useState<string>('');

  useEffect(() => {
    // Fetch both patients and case_openings, then filter
    Promise.all([
      fetch(`${API_URL}/data/patients_derived`).then(res => res.json()),
      fetch(`${API_URL}/data/case_openings`).then(res => res.json())
    ]).then(([patientsData, caseOpenings]) => {
      if (Array.isArray(patientsData) && Array.isArray(caseOpenings)) {
        const allowedIds = new Set(caseOpenings.map((c: any) => c.P_ID_FK));
        setPatients(patientsData.filter((p: any) => allowedIds.has(p.id)));
      }
    });
  }, []);

  // Generate mock schedule table based on form
  const generateSchedule = () => {
    setError('');
    if (form.fromDate && form.tillDate && new Date(form.fromDate) > new Date(form.tillDate)) {
      setScheduleRows([]);
      setSelectedRows([]);
      setError('From Date must be before or equal to Till Date.');
      return;
    }
    let startDate = form.fromDate ? new Date(form.fromDate) : new Date();
    let endDate = form.tillDate ? new Date(form.tillDate) : null;
    const rows = [];
    let i = 0;
    let count = 0;
    while (count < form.numSessions) {
      const date = new Date(startDate);
      date.setDate(startDate.getDate() + i * (form.interval === 'alternate' ? 2 : 1));
      if (endDate && date > endDate) break;
      rows.push({
        id: count + 1,
        date: date.toISOString().slice(0, 10),
        time: form.sessionPreferred === '1st' ? '08:00' : form.sessionPreferred === '2nd' ? '12:00' : '16:00',
        dayName: getDayName(date.toISOString().slice(0, 10)),
        monthName: getMonthName(date.toISOString().slice(0, 10)),
        nthSession: form.sessionPreferred,
      });
      count++;
      i++;
    }
    if (rows.length === 0) {
      setError('No sessions can be generated for the selected date range and interval.');
    }
    setScheduleRows(rows);
    setSelectedRows([]);
  };

  const handleFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setForm(prev => ({ ...prev, [name]: name === 'numSessions' ? Number(value) : value }));
  };

  const handleRowSelect = (row: any) => {
    setSelectedRows(prev =>
      prev.some(r => r.id === row.id)
        ? prev.filter(r => r.id !== row.id)
        : [...prev, row]
    );
  };

  const handleSave = async () => {
    if (!form.patient || selectedRows.length === 0) {
      setSaveStatus('Select a patient and at least one session.');
      return;
    }
    const today = new Date().toISOString().slice(0, 10);
    const sessions = selectedRows.map((row, idx) => ({
      // SA_ID_PK will be auto-generated by backend
      P_ID_FK: form.patient,
      SA_Date: row.date,
      SA_Time: row.time,
      isDeleted: 10,
      Added_by: 'admin',
      Added_on: today,
      Modified_by: 'admin',
      Modified_on: today,
      Provider_FK: 'PR001', // Placeholder
      Outlet_FK: 'OUT001'   // Placeholder
    }));
    try {
      const res = await fetch(`${API_URL}/data/schedules_assigned`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(sessions)
      });
      if (res.ok) {
        setSaveStatus('Sessions saved successfully!');
      } else {
        setSaveStatus('Failed to save sessions.');
      }
    } catch (err) {
      setSaveStatus('Error saving sessions.');
    }
  };

  return (
    <>
      <Header sidebarCollapsed={sidebarCollapsed} toggleSidebar={toggleSidebar} />
      <PageContainer>
        <SectionHeading title="Scheduling" subtitle="Fill the form to generate schedule" />
        {error && <div style={{ color: 'red', marginBottom: 16 }}>{error}</div>}
        {/* <form style={{ maxWidth: 1500, margin: '0 auto', marginBottom: 32, backgroundColor: '#f5f5f5', padding: '8px' }} onSubmit={e => { e.preventDefault(); generateSchedule(); }}> */}
        <form style={{ height: 370, margin: '0 auto', marginBottom: 5, backgroundColor: 'none', padding: '8px',boxShadow: '0 2px 8px #eee' }} onSubmit={e => { e.preventDefault(); generateSchedule(); }}>

          {/* <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px' }}> */}
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px' }}>
            <div className="form-group">
              <label htmlFor="patient" className="form-label">Patient <span className="text-danger">*</span></label>
              <select
                id="patient"
                name="patient"
                className="form-select"
                value={form.patient}
                onChange={handleFormChange}
              // required
              >
                <option value="">Select Patient </option>
                {patients.map(p => (
                  <option key={p.id} value={p.id}>{`${p.id} - ${p.Name}`}</option>
                ))}
              </select>
            </div>
            <div className="form-group">
              <label htmlFor="interval" className="form-label">Interval <span className="text-danger">*</span></label>
              <select
                id="interval"
                name="interval"
                className="form-select"
                value={form.interval}
                onChange={handleFormChange}
                required
              >
                <option value="">Select Interval</option>
                {intervalOptions.map(opt => (
                  <option key={opt.value} value={opt.value}>{opt.label}</option>
                ))}
              </select>
            </div>
            <div className="form-group" >
              <label htmlFor="sessionPreferred" className="form-label">Session Preferred <span className="text-danger">*</span></label>
              <select
                id="sessionPreferred"
                name="sessionPreferred"
                className="form-select"
                value={form.sessionPreferred}
                onChange={handleFormChange}
                required
              >
                <option value="">Select Session</option>
                {sessionOptions.map(opt => (
                  <option key={opt.value} value={opt.value}>{opt.label}</option>
                ))}
              </select>
            </div>
            <div className="form-group" >
              <label htmlFor="numSessions" className="form-label">Number of Sessions <span className="text-danger">*</span></label>
              <input
                id="numSessions"
                name="numSessions"
                type="number"
                className="form-control"
                value={form.numSessions}
                min={1}
                onChange={handleFormChange}
                required
              />
            </div>
            <div className="form-group">
              <label htmlFor="fromDate" className="form-label">From Date <span className="text-danger">*</span></label>
              <input
                id="fromDate"
                name="fromDate"
                type="date"
                className="form-control"
                value={form.fromDate}
                min={today}
                onChange={handleFormChange}
                required
              />
            </div>
            <div className="form-group">
              <label htmlFor="tillDate" className="form-label">Till Date <span style={{ visibility: 'hidden' }} className="text-danger">*</span></label>
              <input
                id="tillDate"
                name="tillDate"
                type="date"
                className="form-control"
                value={form.tillDate}
                min={form.fromDate}
                onChange={handleFormChange}
              />
            </div>
            <div style={{ textAlign: 'left', marginTop: 16 }}>
              <ButtonWithGradient type="submit">Generate Schedule</ButtonWithGradient>
            </div>
          </div>
        </form>
        {scheduleRows.length > 0 && (
          <>
            <h4>Schedule Table</h4>
            <Table
              columns={[
                { key: 'date', header: 'Date' },
                { key: 'time', header: 'Time' },
                { key: 'dayName', header: 'Day Name' },
                { key: 'monthName', header: 'Month Name' },
                { key: 'nthSession', header: 'Nth Session of Day' },
                { key: 'select', header: 'Select' },
              ]}
              data={scheduleRows.map(row => ({
                ...row,
                select: (
                  <input
                    type="checkbox"
                    checked={selectedRows.some(r => r.id === row.id)}
                    onChange={() => handleRowSelect(row)}
                  />
                ),
              }))}
            />
            {selectedRows.length > 0 && (
              <>
                <h4 style={{ marginTop: 32 }}>Selected Sessions</h4>
                <Table
                  columns={[
                    { key: 'date', header: 'Date' },
                    { key: 'time', header: 'Time' },
                    { key: 'dayName', header: 'Day Name' },
                    { key: 'monthName', header: 'Month Name' },
                    { key: 'nthSession', header: 'Nth Session of Day' },
                  ]}
                  data={selectedRows}
                />
                <div style={{ textAlign: 'center', marginTop: 24 }}>
                  <ButtonWithGradient type="button" onClick={handleSave}>Save Sessions</ButtonWithGradient>
                </div>
                {saveStatus && <div style={{ textAlign: 'center', color: saveStatus.includes('success') ? 'green' : 'red', marginTop: 8 }}>{saveStatus}</div>}
              </>
            )}
          </>
        )}
      </PageContainer>
      <Footer />
    </>
  );
};

export default Scheduling; 